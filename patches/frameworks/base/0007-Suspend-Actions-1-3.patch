From 53650be11929abc13519639b9b05d5534ecc1f3e Mon Sep 17 00:00:00 2001
From: faust93 <monumentum@gmail.com>
Date: Tue, 10 Jan 2017 21:05:57 +0300
Subject: [PATCH] Suspend Actions [1/3]

Change-Id: I86fa72c7baa07af3caa2dbe8558f3db0286459fa
---
 core/java/android/provider/Settings.java           |  30 ++++
 packages/SystemUI/AndroidManifest.xml              |   9 +
 .../src/com/android/systemui/BootReceiver.java     |   6 +
 .../android/systemui/screenstate/GpsToggle.java    |  79 +++++++++
 .../systemui/screenstate/MobileDataToggle.java     |  84 ++++++++++
 .../systemui/screenstate/ScreenStateService.java   | 185 +++++++++++++++++++++
 .../systemui/screenstate/ScreenStateToggle.java    |  79 +++++++++
 .../android/systemui/screenstate/TwoGToggle.java   | 109 ++++++++++++
 .../java/android/telephony/TelephonyManager.java   |  10 ++
 .../com/android/internal/telephony/ITelephony.aidl |   7 +
 .../android/internal/telephony/PhoneConstants.java |  18 ++
 11 files changed, 616 insertions(+)
 create mode 100644 packages/SystemUI/src/com/android/systemui/screenstate/GpsToggle.java
 create mode 100644 packages/SystemUI/src/com/android/systemui/screenstate/MobileDataToggle.java
 create mode 100644 packages/SystemUI/src/com/android/systemui/screenstate/ScreenStateService.java
 create mode 100644 packages/SystemUI/src/com/android/systemui/screenstate/ScreenStateToggle.java
 create mode 100644 packages/SystemUI/src/com/android/systemui/screenstate/TwoGToggle.java

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 2f2ca0c..edea1e9 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -4549,6 +4549,36 @@ public final class Settings {
         public static final String RECENTS_FINGER_GESTURE = "recents_finger_gesture";
 
         /**
+         * @hide
+         */
+        public static final String START_SCREEN_STATE_SERVICE = "start_screen_state_service";
+
+        /**
+         * @hide
+         */
+        public static final String SCREEN_STATE_TWOG = "screen_state_twog";
+
+        /**
+         * @hide
+         */
+        public static final String SCREEN_STATE_GPS = "screen_state_gps";
+
+        /**
+         * @hide
+         */
+        public static final String SCREEN_STATE_MOBILE_DATA = "screen_state_mobile_data";
+
+        /**
+         * @hide
+         */
+        public static final String SCREEN_STATE_OFF_DELAY = "screen_state_off_delay";
+
+        /**
+         * @hide
+         */
+        public static final String SCREEN_STATE_ON_DELAY = "screen_state_on_delay";
+
+        /**
          * Change fonts for the system lockscreen clock widget
          * @hide
          */
diff --git a/packages/SystemUI/AndroidManifest.xml b/packages/SystemUI/AndroidManifest.xml
index 0d816f2..99a1140 100644
--- a/packages/SystemUI/AndroidManifest.xml
+++ b/packages/SystemUI/AndroidManifest.xml
@@ -190,6 +190,8 @@
     <!-- Device gestures -->
     <protected-broadcast android:name="com.android.systemui.doze.pulse" />
 
+    <protected-broadcast android:name="android.intent.action.SCREEN_STATE_SERVICE_UPDATE" />
+
     <application
         android:name=".SystemUIApplication"
         android:persistent="true"
@@ -241,6 +243,13 @@
         <service android:name=".CPUInfoService"
                 android:exported="true" />
 
+        <service android:name=".screenstate.ScreenStateService"
+                android:exported="true" >
+            <intent-filter>
+               <android name="android.intent.action.SCREEN_STATE_SERVICE_UPDATE"/>
+            </intent-filter>
+        </service>
+
         <receiver android:name=".BootReceiver" androidprv:systemUserOnly="true">
             <intent-filter android:priority="1000">
                 <action android:name="android.intent.action.BOOT_COMPLETED" />
diff --git a/packages/SystemUI/src/com/android/systemui/BootReceiver.java b/packages/SystemUI/src/com/android/systemui/BootReceiver.java
index 4ebaf52..6b586f9 100644
--- a/packages/SystemUI/src/com/android/systemui/BootReceiver.java
+++ b/packages/SystemUI/src/com/android/systemui/BootReceiver.java
@@ -40,6 +40,12 @@ public class BootReceiver extends BroadcastReceiver {
                 context.startService(cpuinfo);
             }
 
+            // start the screen state service if activated
+            if (Settings.System.getInt(res, Settings.System.START_SCREEN_STATE_SERVICE, 0) != 0) {
+                Intent screenstate = new Intent(context, com.android.systemui.screenstate.ScreenStateService.class);
+                context.startService(screenstate);
+            }
+
         } catch (Exception e) {
             Log.e(TAG, "Can't start cpuinfo service", e);
         }
diff --git a/packages/SystemUI/src/com/android/systemui/screenstate/GpsToggle.java b/packages/SystemUI/src/com/android/systemui/screenstate/GpsToggle.java
new file mode 100644
index 0000000..fbd4e44
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/screenstate/GpsToggle.java
@@ -0,0 +1,79 @@
+/*
+ * Copyright (C) 2007 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.systemui.screenstate;
+
+import android.content.Context;
+import android.location.LocationManager;
+import android.provider.Settings;
+import android.telephony.TelephonyManager;
+import android.util.Log;
+
+public class GpsToggle extends ScreenStateToggle {
+    private static final String TAG = "ScreenStateService_GpsToggle";
+
+    public GpsToggle(Context context){
+        super(context);
+    }
+
+    protected boolean isEnabled(){
+        int s = Settings.System.getInt(mContext.getContentResolver(), Settings.System.SCREEN_STATE_GPS, 0);
+        if(s != 0)
+            return true;
+        else
+            return false;
+    }
+
+    protected boolean doScreenOnAction(){
+        return mDoAction;
+    }
+
+    protected boolean doScreenOffAction(){
+        if (isGpsEnabled()){
+            mDoAction = true;
+        } else {
+            mDoAction = false;
+        }
+        return mDoAction;
+    }
+
+    private boolean isGpsEnabled(){
+        // TODO: check if gps is available on this device?
+        return Settings.Secure.isLocationProviderEnabled(
+                mContext.getContentResolver(), LocationManager.GPS_PROVIDER);
+
+    }
+
+    protected Runnable getScreenOffAction(){
+        return new Runnable() {
+            @Override
+            public void run() {
+                Settings.Secure.setLocationProviderEnabled(mContext.getContentResolver(),
+                        LocationManager.GPS_PROVIDER, false);
+                Log.d(TAG, "gps = false");
+            }
+        };
+    }
+    protected Runnable getScreenOnAction(){
+        return new Runnable() {
+            @Override
+            public void run() {
+                Settings.Secure.setLocationProviderEnabled(mContext.getContentResolver(),
+                        LocationManager.GPS_PROVIDER, true);
+                Log.d(TAG, "gps = true");
+            }
+        };
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/screenstate/MobileDataToggle.java b/packages/SystemUI/src/com/android/systemui/screenstate/MobileDataToggle.java
new file mode 100644
index 0000000..2492175
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/screenstate/MobileDataToggle.java
@@ -0,0 +1,84 @@
+/*
+ * Copyright (C) 2007 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.systemui.screenstate;
+
+import android.content.Context;
+import android.provider.Settings;
+import android.net.ConnectivityManager;
+import android.telephony.TelephonyManager;
+import android.util.Log;
+
+public class MobileDataToggle extends ScreenStateToggle {
+    private static final String TAG = "ScreenStateService_MobileDataToggle";
+
+    public MobileDataToggle(Context context){
+        super(context);
+    }
+
+    protected boolean isEnabled(){
+        ConnectivityManager cm = (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
+        if (!cm.isNetworkSupported(ConnectivityManager.TYPE_MOBILE)){
+            return false;
+        }
+        int s = Settings.System.getInt(mContext.getContentResolver(), Settings.System.SCREEN_STATE_MOBILE_DATA, 0);
+        if(s!=0)
+            return true;
+        else
+            return false;
+    }
+
+    protected boolean doScreenOnAction(){
+        return mDoAction;
+    }
+
+    protected boolean doScreenOffAction(){
+        if (isMobileDataEnabled()){
+            mDoAction = true;
+        } else {
+            mDoAction = false;
+        }
+        return mDoAction;
+    }
+
+    private boolean isMobileDataEnabled(){
+            TelephonyManager telephonyService = (TelephonyManager)mContext.getSystemService(Context.TELEPHONY_SERVICE);
+            return telephonyService.getDataEnabled();
+    }
+
+    private void setMobileDataState(boolean mobileDataEnabled){
+        TelephonyManager telephonyService = (TelephonyManager)mContext.getSystemService(Context.TELEPHONY_SERVICE);
+        telephonyService.setDataEnabled(mobileDataEnabled);
+    }
+
+    protected Runnable getScreenOffAction(){
+        return new Runnable() {
+            @Override
+            public void run() {
+                setMobileDataState(false);
+                Log.d(TAG, "mobileData = false");
+            }
+        };
+    }
+    protected Runnable getScreenOnAction(){
+        return new Runnable() {
+            @Override
+            public void run() {
+                setMobileDataState(true);
+                Log.d(TAG, "mobileData = true");
+            }
+        };
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/screenstate/ScreenStateService.java b/packages/SystemUI/src/com/android/systemui/screenstate/ScreenStateService.java
new file mode 100644
index 0000000..835ab04
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/screenstate/ScreenStateService.java
@@ -0,0 +1,185 @@
+/*
+ * Copyright (C) 2007 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.systemui.screenstate;
+
+import android.app.Service;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.provider.Settings;
+import android.os.IBinder;
+import android.os.PowerManager;
+import android.util.Log;
+import android.database.ContentObserver;
+import android.content.ContentResolver;
+import android.os.Handler;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Iterator;
+
+public class ScreenStateService extends Service  {
+
+    private static final String TAG = "ScreenStateService";
+    private BroadcastReceiver mPowerKeyReceiver;
+    private TwoGToggle mTwoGToggle;
+    private GpsToggle mGpsToggle;
+    private MobileDataToggle mMobileDataToggle;
+    private boolean mEnabled = true;
+    private Context mContext;
+    private List<ScreenStateToggle> fEnabledToggles;
+    private List<ScreenStateToggle> fAllToggles;
+
+    private Handler scrOnHandler;
+    private Handler scrOffHandler;
+    private boolean offScheduled = true;
+    private boolean onScheduled = false;
+
+    private Runnable scrOffTask = new Runnable() {
+        public void run() {
+            Log.v(TAG,"scrOffTask");
+                Iterator<ScreenStateToggle> nextToggle = fEnabledToggles.iterator();
+                while(nextToggle.hasNext()){
+                    ScreenStateToggle toggle = nextToggle.next();
+                    toggle.doScreenOff();
+                }
+            offScheduled = false;
+            }
+    };
+
+    private Runnable scrOnTask = new Runnable() {
+        public void run() {
+            Log.v(TAG,"scrOnTask");
+                Iterator<ScreenStateToggle> nextToggle = fEnabledToggles.iterator();
+                while(nextToggle.hasNext()){
+                    ScreenStateToggle toggle = nextToggle.next();
+                    toggle.doScreenOn();
+                }
+            onScheduled = false;
+            }
+    };
+
+    @Override
+    public IBinder onBind(Intent intent) {
+        return null;
+    }
+
+    @Override
+    public void onDestroy() {
+        Log.d(TAG, "onDestroy");
+        if (mEnabled){
+            unregisterReceiver();
+        }
+    }
+
+    @Override
+    public void onStart(Intent intent, int startid)
+    {
+        Log.d(TAG, "onStart");
+        mContext = getApplicationContext();
+
+        // firewall
+        int s = Settings.System.getInt(mContext.getContentResolver(), Settings.System.START_SCREEN_STATE_SERVICE, 0);
+        if(s!=0)
+            mEnabled = true;
+        else
+            mEnabled = false;
+
+        if (mEnabled){
+            registerBroadcastReceiver();
+        }
+
+        scrOnHandler = new Handler();
+        scrOffHandler = new Handler();
+
+        fAllToggles = new ArrayList<ScreenStateToggle>();
+        mTwoGToggle = new TwoGToggle(mContext);
+        fAllToggles.add(mTwoGToggle);
+        mGpsToggle = new GpsToggle(mContext);
+        fAllToggles.add(mGpsToggle);
+        mMobileDataToggle = new MobileDataToggle(mContext);
+        fAllToggles.add(mMobileDataToggle);
+
+        updateEnabledToggles();
+    }
+
+    private void registerBroadcastReceiver() {
+        final IntentFilter theFilter = new IntentFilter();
+        /** System Defined Broadcast */
+        theFilter.addAction(Intent.ACTION_SCREEN_ON);
+        theFilter.addAction(Intent.ACTION_SCREEN_OFF);
+        theFilter.addAction("android.intent.action.SCREEN_STATE_SERVICE_UPDATE");
+
+        mPowerKeyReceiver = new BroadcastReceiver() {
+            @Override
+            public void onReceive(Context context, Intent intent) {
+                String strAction = intent.getAction();
+
+                if (strAction.equals(Intent.ACTION_SCREEN_OFF)){
+                    Log.d(TAG, "screen off");
+                    if(onScheduled){
+                        scrOnHandler.removeCallbacks(scrOnTask);
+                    } else {
+                        int sec = Settings.System.getInt(mContext.getContentResolver(), Settings.System.SCREEN_STATE_OFF_DELAY, 0);
+                        Log.d(TAG, "screen off delay: " + sec);
+                        scrOffHandler.postDelayed(scrOffTask, sec * 1000);
+                        offScheduled = true;
+                    }
+                }
+                if (strAction.equals(Intent.ACTION_SCREEN_ON)) {
+                    Log.d(TAG, "scren on");
+                    if(offScheduled){
+                        scrOffHandler.removeCallbacks(scrOffTask);
+                    } else {
+                        int sec = Settings.System.getInt(mContext.getContentResolver(), Settings.System.SCREEN_STATE_ON_DELAY, 0);
+                        Log.d(TAG, "screen on delay: " + sec);
+                        scrOnHandler.postDelayed(scrOnTask, sec * 1000);
+                        onScheduled = true;
+                    }
+                }
+                if (strAction.equals("android.intent.action.SCREEN_STATE_SERVICE_UPDATE")){
+                    Log.d(TAG, "update enabled toggles");
+                    updateEnabledToggles();
+                }
+            }
+        };
+
+        Log.d(TAG, "registerBroadcastReceiver");
+        mContext.registerReceiver(mPowerKeyReceiver, theFilter);
+    }
+
+    private void unregisterReceiver() {
+        try {
+            Log.d(TAG, "unregisterReceiver");
+            mContext.unregisterReceiver(mPowerKeyReceiver);
+        }
+        catch (IllegalArgumentException e) {
+            mPowerKeyReceiver = null;
+        }
+    }
+
+    private void updateEnabledToggles() {
+        fEnabledToggles = new ArrayList<ScreenStateToggle>();
+        Iterator<ScreenStateToggle> nextToggle = fAllToggles.iterator();
+        while(nextToggle.hasNext()){
+            ScreenStateToggle toggle = nextToggle.next();
+            if (toggle.isEnabled()){
+                Log.d(TAG, "active toggle "+ toggle.getClass().getName());
+                fEnabledToggles.add(toggle);
+            }
+        }
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/screenstate/ScreenStateToggle.java b/packages/SystemUI/src/com/android/systemui/screenstate/ScreenStateToggle.java
new file mode 100644
index 0000000..6af5de7
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/screenstate/ScreenStateToggle.java
@@ -0,0 +1,79 @@
+/*
+ * Copyright (C) 2007 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.systemui.screenstate;
+
+import android.content.Context;
+import android.provider.Settings;
+import android.telephony.TelephonyManager;
+import android.os.Looper;
+
+public abstract class ScreenStateToggle {
+    protected Context mContext;
+    protected boolean mDoAction = false;
+    protected ScreenStateService mService;
+
+    public ScreenStateToggle(Context context){
+        mContext = context;
+    }
+
+    protected boolean runInThread(){
+        return true;
+    }
+
+    protected abstract boolean isEnabled();
+    protected abstract boolean doScreenOnAction();
+    protected abstract boolean doScreenOffAction();
+    protected abstract Runnable getScreenOffAction();
+    protected abstract Runnable getScreenOnAction();
+
+    public void doScreenOff(){
+        if(isEnabled() && doScreenOffAction()){
+            final Runnable r = getScreenOffAction();
+            if(runInThread()){
+                Thread thread = new Thread()
+                {
+                    @Override
+                    public void run() {
+                        r.run();
+                    }
+                };
+
+                thread.start();
+            } else {
+                r.run();
+            }
+        }
+
+    }
+    public void doScreenOn(){
+        if(isEnabled() && doScreenOnAction()){
+            final Runnable r = getScreenOnAction();
+            if(runInThread()){
+                Thread thread = new Thread()
+                {
+                    @Override
+                    public void run() {
+                        r.run();
+                    }
+                };
+
+                thread.start();
+            } else {
+                r.run();
+            }
+        }
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/screenstate/TwoGToggle.java b/packages/SystemUI/src/com/android/systemui/screenstate/TwoGToggle.java
new file mode 100644
index 0000000..347e30d
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/screenstate/TwoGToggle.java
@@ -0,0 +1,109 @@
+/*
+ * Copyright (C) 2007 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.systemui.screenstate;
+
+import android.content.Context;
+import android.provider.Settings;
+import android.telephony.TelephonyManager;
+import com.android.internal.telephony.Phone;
+import android.util.Log;
+import android.net.ConnectivityManager;
+
+public class TwoGToggle extends ScreenStateToggle {
+    private static final String TAG = "ScreenStateService_TwoGToggle";
+
+    public TwoGToggle(Context context){
+        super(context);
+    }
+
+    // TODO: samsung is creating a handler when switching to 2G :(
+    protected boolean runInThread(){
+        return false;
+    }
+
+    protected boolean isEnabled(){
+        ConnectivityManager cm = (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
+        if (!cm.isNetworkSupported(ConnectivityManager.TYPE_MOBILE)){
+            Log.d(TAG, "Data not enabled");
+            return false;
+        }
+        int s = Settings.System.getInt(mContext.getContentResolver(), Settings.System.SCREEN_STATE_TWOG, 0);
+        if(s!=0)
+            return true;
+        else
+            return false;
+    }
+
+    protected boolean doScreenOnAction(){
+        return mDoAction;
+    }
+
+    protected boolean doScreenOffAction(){
+        if (isNotTwoGMode()){
+            mDoAction = true;
+        } else {
+            mDoAction = false;
+        }
+        return mDoAction;
+    }
+
+    private int getCurrentPreferredNetworkMode() {
+        int network = -1;
+        int dataSim;
+        try {
+            dataSim = Settings.Global.getInt(mContext.getContentResolver(),
+                    Settings.Global.MULTI_SIM_DATA_CALL_SUBSCRIPTION);
+            if(dataSim != 0){
+                network = Settings.Global.getInt(mContext.getContentResolver(),
+                    Settings.Global.PREFERRED_NETWORK_MODE + dataSim);
+            } else {
+                network = Settings.Global.getInt(mContext.getContentResolver(),
+                    Settings.Global.PREFERRED_NETWORK_MODE);
+            }
+        } catch (Settings.SettingNotFoundException e) {
+            e.printStackTrace();
+        }
+        Log.d(TAG, "preferred SIM data network: " + network);
+        return network;
+    }
+
+    private boolean isNotTwoGMode(){
+        return getCurrentPreferredNetworkMode() != Phone.NT_MODE_GSM_ONLY;
+    }
+
+    protected Runnable getScreenOffAction(){
+        return new Runnable() {
+            @Override
+            public void run() {
+                TelephonyManager tm = (TelephonyManager) mContext
+                        .getSystemService(Context.TELEPHONY_SERVICE);
+                Log.d(TAG, "2G = true");
+                tm.toggle2G(true);
+            }
+        };
+    }
+    protected Runnable getScreenOnAction(){
+        return new Runnable() {
+            @Override
+            public void run() {
+                TelephonyManager tm = (TelephonyManager) mContext
+                        .getSystemService(Context.TELEPHONY_SERVICE);
+                Log.d(TAG, "2G = false");
+                tm.toggle2G(false);
+            }
+        };
+    }
+}
diff --git a/telephony/java/android/telephony/TelephonyManager.java b/telephony/java/android/telephony/TelephonyManager.java
index 873b7c5..4e7053b 100644
--- a/telephony/java/android/telephony/TelephonyManager.java
+++ b/telephony/java/android/telephony/TelephonyManager.java
@@ -3264,6 +3264,16 @@ public class TelephonyManager {
     }
 
     /**
+     * @hide
+     */
+    public void toggle2G(boolean twoGees) {
+        try {
+            getITelephony().toggle2G(twoGees);
+        } catch (RemoteException e) {
+        }
+    }
+
+    /**
      * Returns the MMS user agent.
      */
     public String getMmsUserAgent() {
diff --git a/telephony/java/com/android/internal/telephony/ITelephony.aidl b/telephony/java/com/android/internal/telephony/ITelephony.aidl
index dc58fc1..6c1029c 100644
--- a/telephony/java/com/android/internal/telephony/ITelephony.aidl
+++ b/telephony/java/com/android/internal/telephony/ITelephony.aidl
@@ -1210,4 +1210,11 @@ interface ITelephony {
      * @hide
      */
     void setPolicyDataEnabled(boolean enabled, int subId);
+
+    /**
+     * Toggle between 2G and 3G (NT_MODE_GSM, NT_MODE_WCDMA_PREF)
+     * @param boolean to turn on and off 2G
+     * @hide
+     */
+     void toggle2G(boolean on);
 }
diff --git a/telephony/java/com/android/internal/telephony/PhoneConstants.java b/telephony/java/com/android/internal/telephony/PhoneConstants.java
index fdc68b9..2c8012d 100644
--- a/telephony/java/com/android/internal/telephony/PhoneConstants.java
+++ b/telephony/java/com/android/internal/telephony/PhoneConstants.java
@@ -68,6 +68,24 @@ public class PhoneConstants {
     public static final int LTE_ON_CDMA_FALSE = RILConstants.LTE_ON_CDMA_FALSE;
     public static final int LTE_ON_CDMA_TRUE = RILConstants.LTE_ON_CDMA_TRUE;
 
+    // Used for preferred network type
+    // Note NT_* substitute RILConstants.NETWORK_MODE_* above the Phone
+    public static final int NT_MODE_WCDMA_PREF   = RILConstants.NETWORK_MODE_WCDMA_PREF;
+    public static final int NT_MODE_GSM_ONLY     = RILConstants.NETWORK_MODE_GSM_ONLY;
+    public static final int NT_MODE_WCDMA_ONLY   = RILConstants.NETWORK_MODE_WCDMA_ONLY;
+    public static final int NT_MODE_GSM_UMTS     = RILConstants.NETWORK_MODE_GSM_UMTS;
+    public static final int NT_MODE_LTE_GSM_WCDMA= RILConstants.NETWORK_MODE_LTE_GSM_WCDMA;
+
+    public static final int NT_MODE_CDMA         = RILConstants.NETWORK_MODE_CDMA;
+
+    public static final int NT_MODE_CDMA_NO_EVDO = RILConstants.NETWORK_MODE_CDMA_NO_EVDO;
+    public static final int NT_MODE_EVDO_NO_CDMA = RILConstants.NETWORK_MODE_EVDO_NO_CDMA;
+    public static final int NT_MODE_GLOBAL       = RILConstants.NETWORK_MODE_GLOBAL;
+    public static final int NT_MODE_LTE_CDMA_EVDO = RILConstants.NETWORK_MODE_LTE_CDMA_EVDO;
+
+    public static final int NT_MODE_LTE_ONLY     = RILConstants.NETWORK_MODE_LTE_ONLY;
+    public static final int PREFERRED_NT_MODE    = RILConstants.PREFERRED_NETWORK_MODE;
+
     // Number presentation type for caller id display (From internal/Connection.java)
     public static final int PRESENTATION_ALLOWED = 1;    // normal
     public static final int PRESENTATION_RESTRICTED = 2; // block by user
-- 
1.9.3 (Apple Git-50)

