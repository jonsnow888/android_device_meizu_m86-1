From b2819d2412bf23a6805fbf35c81b6113430ca185 Mon Sep 17 00:00:00 2001
From: faust93 <monumentum@gmail.com>
Date: Thu, 1 Dec 2016 12:05:39 +0300
Subject: [PATCH] vibra intensity

---
 res/layout/vibrator_intensity.xml                  |  49 +++++
 res/values/strings.xml                             |   4 +
 res/xml/button_settings.xml                        |   6 +
 .../cmparts/hardware/VibratorIntensity.java        | 219 +++++++++++++++++++++
 4 files changed, 278 insertions(+)
 create mode 100644 res/layout/vibrator_intensity.xml
 create mode 100644 src/org/cyanogenmod/cmparts/hardware/VibratorIntensity.java

diff --git a/res/layout/vibrator_intensity.xml b/res/layout/vibrator_intensity.xml
new file mode 100644
index 0000000..171f90e
--- /dev/null
+++ b/res/layout/vibrator_intensity.xml
@@ -0,0 +1,49 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2013 The CyanogenMod Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<RelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_height="match_parent"
+    android:layout_width="match_parent"
+    android:paddingTop="24dp"
+    android:paddingBottom="24dp"
+    android:paddingEnd="24dp" >
+
+    <SeekBar
+        android:id="@*android:id/seekbar"
+        android:layout_height="wrap_content"
+        android:layout_width="match_parent"
+        android:layout_alignParentStart="true"
+        android:layout_marginStart="8dp"
+        android:layout_toStartOf="@id/value" />
+
+    <TextView
+        android:id="@+id/value"
+        android:layout_height="wrap_content"
+        android:layout_width="wrap_content"
+        android:layout_alignParentEnd="true"
+        android:layout_marginStart="4dp"
+        android:gravity="center_horizontal"
+        android:minEms="2" />
+
+    <TextView
+        android:id="@+id/warning_text"
+        android:layout_below="@*android:id/seekbar"
+        android:layout_height="wrap_content"
+        android:layout_width="match_parent"
+        android:layout_marginStart="24dp"
+        android:layout_marginTop="24dp" />
+
+</RelativeLayout>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index 79e8ae7..6c2169c 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -546,6 +546,10 @@
     <string name="hifi_gain_high_title">High Gain</string>
     <string name="hifi_gain_line_title">LineOut</string>
 
+    <!-- Hardware tunables - Vibrator intensity -->
+    <string name="vibrator_intensity_title">Vibrator intensity</string>
+    <string name="vibrator_warning">Values higher than %1$d%% are not recommended</string>
+
     <!-- Power: Performance profiles -->
     <string name="perf_profile_settings_title">Battery saver and performance</string>
     <string name="perf_profile_settings_summary">Adjust power saving features and device performance</string>
diff --git a/res/xml/button_settings.xml b/res/xml/button_settings.xml
index c587fca..d01fc51 100644
--- a/res/xml/button_settings.xml
+++ b/res/xml/button_settings.xml
@@ -30,6 +30,12 @@
         android:dialogTitle="@string/button_backlight_title"
         android:persistent="false" />
 
+    <org.cyanogenmod.cmparts.hardware.VibratorIntensity
+        android:key="vibrator_intensity"
+        android:title="@string/vibrator_intensity_title"
+        android:dialogTitle="@string/vibrator_intensity_title"
+        android:persistent="false" />
+
     <PreferenceCategory
         android:key="navigation_bar_category"
         android:title="@string/navigation_bar_category" >
diff --git a/src/org/cyanogenmod/cmparts/hardware/VibratorIntensity.java b/src/org/cyanogenmod/cmparts/hardware/VibratorIntensity.java
new file mode 100644
index 0000000..e7e37ba
--- /dev/null
+++ b/src/org/cyanogenmod/cmparts/hardware/VibratorIntensity.java
@@ -0,0 +1,219 @@
+/*
+ * Copyright (C) 2013 The CyanogenMod Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.cyanogenmod.cmparts.hardware;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.SharedPreferences;
+import android.content.SharedPreferences.Editor;
+import android.graphics.Color;
+import android.graphics.LightingColorFilter;
+import android.graphics.drawable.Drawable;
+import android.graphics.drawable.LayerDrawable;
+import android.os.Bundle;
+import android.os.Vibrator;
+import android.preference.DialogPreference;
+import android.preference.PreferenceManager;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.View;
+import android.widget.SeekBar;
+import android.widget.TextView;
+import android.widget.Button;
+
+import android.support.v14.preference.SwitchPreference;
+import android.support.v7.preference.CheckBoxPreference;
+import android.support.v7.preference.Preference;
+import android.support.v7.preference.PreferenceScreen;
+
+import cyanogenmod.hardware.CMHardwareManager;
+
+import org.cyanogenmod.cmparts.widget.CustomDialogPreference;
+import org.cyanogenmod.cmparts.R;
+
+import cyanogenmod.providers.CMSettings;
+
+public class VibratorIntensity extends CustomDialogPreference<AlertDialog> implements
+        SeekBar.OnSeekBarChangeListener {
+    private static final String PREF_NAME = "vibrator_intensity";
+    private SeekBar mSeekBar;
+    private TextView mValue;
+    private TextView mWarning;
+    private int mOriginalValue;
+    private int mMinValue;
+    private int mMaxValue;
+    private int mDefaultValue;
+    private int mWarningValue;
+    private CMHardwareManager mHardware;
+
+    private Drawable mProgressDrawable;
+    private Drawable mProgressThumb;
+    private LightingColorFilter mRedFilter;
+
+    public VibratorIntensity(Context context, AttributeSet attrs) {
+        super(context, attrs);
+
+        mHardware = CMHardwareManager.getInstance(context);
+
+        if (!mHardware.isSupported(CMHardwareManager.FEATURE_VIBRATOR)) {
+            return;
+        }
+
+        setDialogLayoutResource(R.layout.vibrator_intensity);
+    }
+
+    public static boolean isSupported(Context context) {
+        CMHardwareManager hardware = CMHardwareManager.getInstance(context);
+        return hardware.isSupported(CMHardwareManager.FEATURE_VIBRATOR);
+    }
+
+    @Override
+    protected void onPrepareDialogBuilder(AlertDialog.Builder builder, DialogInterface.OnClickListener listener) {
+        super.onPrepareDialogBuilder(builder, listener);
+        builder.setNeutralButton(R.string.reset,
+                new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+            }
+        });
+    }
+
+    @Override
+    protected void onBindDialogView(View view) {
+        super.onBindDialogView(view);
+
+        mSeekBar = (SeekBar) view.findViewById(com.android.internal.R.id.seekbar);
+        mValue = (TextView) view.findViewById(R.id.value);
+        mWarning = (TextView) view.findViewById(R.id.warning_text);
+
+        // Read the current value in case user wants to dismiss his changes
+        mOriginalValue = mHardware.getVibratorIntensity();
+        mWarningValue = mHardware.getVibratorWarningIntensity();
+        mMinValue = mHardware.getVibratorMinIntensity();
+        mMaxValue = mHardware.getVibratorMaxIntensity();
+        mDefaultValue = mHardware.getVibratorDefaultIntensity();
+        if (mWarningValue > 0) {
+            String message = getContext().getResources().getString(
+                    R.string.vibrator_warning, intensityToPercent(mMinValue, mMaxValue,
+                            mWarningValue));
+            mWarning.setText(message);
+        } else if (mWarning != null) {
+            mWarning.setVisibility(View.GONE);
+        }
+
+        Drawable progressDrawable = mSeekBar.getProgressDrawable();
+        if (progressDrawable instanceof LayerDrawable) {
+            LayerDrawable ld = (LayerDrawable) progressDrawable;
+            mProgressDrawable = ld.findDrawableByLayerId(android.R.id.progress);
+        }
+        mProgressThumb = mSeekBar.getThumb();
+        mRedFilter = new LightingColorFilter(Color.BLACK,
+                getContext().getResources().getColor(android.R.color.holo_red_light));
+
+        // Restore percent value from SharedPreferences object
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getContext());
+        int defaultValue = intensityToPercent(mMinValue, mMaxValue, mDefaultValue);
+        int percent = prefs.getInt(PREF_NAME, defaultValue);
+
+        mSeekBar.setOnSeekBarChangeListener(this);
+        mSeekBar.setProgress(percent);
+    }
+
+    @Override
+    protected void onDialogClosed(boolean positiveResult) {
+        super.onDialogClosed(positiveResult);
+
+        if (positiveResult) {
+            // Store percent value in SharedPreferences object
+            SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getContext());
+            prefs.edit().putInt(PREF_NAME, mSeekBar.getProgress()).commit();
+        } else {
+            mHardware.setVibratorIntensity(mHardware.getVibratorIntensity());
+        }
+    }
+
+    public static void restore(Context context) {
+        CMHardwareManager hardware = CMHardwareManager.getInstance(context);
+        if (!hardware.isSupported(CMHardwareManager.FEATURE_VIBRATOR)) {
+            return;
+        }
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+        int vibrator = hardware.getVibratorIntensity();
+        int min = hardware.getVibratorMinIntensity();
+        int max = hardware.getVibratorMaxIntensity();
+        int defaultValue = intensityToPercent(min, max,
+                hardware.getVibratorDefaultIntensity());
+        int percent = prefs.getInt(PREF_NAME, defaultValue);
+
+        hardware.setVibratorIntensity(percentToIntensity(min, max, percent));
+    }
+
+    @Override
+    public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
+        boolean shouldWarn =
+                mWarningValue > 0 && progress >= intensityToPercent(mMinValue, mMaxValue,
+                        mWarningValue);
+
+        if (mProgressDrawable != null) {
+            mProgressDrawable.setColorFilter(shouldWarn ? mRedFilter : null);
+        }
+        if (mProgressThumb != null) {
+            mProgressThumb.setColorFilter(shouldWarn ? mRedFilter : null);
+        }
+
+        mHardware.setVibratorIntensity(percentToIntensity(mMinValue, mMaxValue,
+                progress));
+        mValue.setText(String.format("%d%%", progress));
+    }
+
+    @Override
+    public void onStartTrackingTouch(SeekBar seekBar) {
+        // Do nothing here
+    }
+
+    @Override
+    public void onStopTrackingTouch(SeekBar seekBar) {
+        Vibrator vib = (Vibrator) getContext().getSystemService(Context.VIBRATOR_SERVICE);
+        vib.vibrate(200);
+    }
+
+    private static int intensityToPercent(double minValue, double maxValue, int value) {
+        double percent = (value - minValue) * (100 / (maxValue - minValue));
+
+        if (percent > 100) {
+            percent = 100;
+        } else if (percent < 0) {
+            percent = 0;
+        }
+
+        return (int) percent;
+    }
+
+    private static int percentToIntensity(int minValue, int maxValue, int percent) {
+        int value = Math.round((((maxValue - minValue) * percent) / 100) + minValue);
+
+        if (value > maxValue) {
+            value = maxValue;
+        } else if (value < minValue) {
+            value = minValue;
+        }
+
+        return value;
+    }
+
+}
-- 
1.9.3 (Apple Git-50)

