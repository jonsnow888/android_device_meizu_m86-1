From 7a50a6e725f891f447d36895ff3aedd63ac05ca2 Mon Sep 17 00:00:00 2001
From: faust93 <monumentum@gmail.com>
Date: Tue, 31 Jan 2017 11:32:29 +0300
Subject: [PATCH] AlarmsBlocker [2/2] @faust93 based on WlBlocker by @maxwen

Change-Id: I08ed5ada9a9366d3202a4afc19e24e3b79310670
---
 res/layout/alarm_blocker.xml               |  79 +++++++
 res/layout/alarm_item.xml                  |  27 +++
 res/values/cm_strings.xml                  |  10 +
 res/xml/development_prefs.xml              |   5 +
 src/com/android/settings/AlarmBlocker.java | 344 +++++++++++++++++++++++++++++
 5 files changed, 465 insertions(+)
 create mode 100644 res/layout/alarm_blocker.xml
 create mode 100644 res/layout/alarm_item.xml
 create mode 100644 src/com/android/settings/AlarmBlocker.java

diff --git a/res/layout/alarm_blocker.xml b/res/layout/alarm_blocker.xml
new file mode 100644
index 0000000..0b544cf
--- /dev/null
+++ b/res/layout/alarm_blocker.xml
@@ -0,0 +1,79 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/*
+** Copyright 2013, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:minHeight="?android:attr/listPreferredItemHeight"
+    android:gravity="center_vertical"
+    android:paddingEnd="?android:attr/scrollbarSize"
+    android:background="?android:attr/selectableItemBackground"
+    android:orientation="vertical">
+
+    <LinearLayout
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <RelativeLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content">
+
+            <TextView android:id="@+id/alarm_blocker_title"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:singleLine="true"
+                android:textAppearance="?android:attr/textAppearanceMedium"
+                android:ellipsize="marquee"
+                android:text="@string/alarm_blocker_title"
+                android:padding="6dp"
+                android:fadingEdge="horizontal" />
+
+            <TextView android:id="@+id/alarm_blocker_title_summary"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_below="@id/alarm_blocker_title"
+                android:layout_alignStart="@id/alarm_blocker_title"
+                android:textAppearance="?android:attr/textAppearanceSmall"
+                android:textColor="?android:attr/textColorSecondary"
+                android:text="@string/alarm_blocker_summary"
+                android:padding="6dp"
+                android:maxLines="4" />
+
+            <Switch 
+                android:id="@+id/alarm_blocker_switch"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentRight="true" />
+
+        </RelativeLayout>
+
+    </LinearLayout>
+
+    <TextView
+        android:id="@+id/alarm_list_header"
+        android:text="@string/alarm_list_header"
+        style="?android:attr/listSeparatorTextViewStyle" />
+
+    <ListView
+        android:id="@+id/alarm_list"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"/>
+
+</LinearLayout>
diff --git a/res/layout/alarm_item.xml b/res/layout/alarm_item.xml
new file mode 100644
index 0000000..cc9fbe4
--- /dev/null
+++ b/res/layout/alarm_item.xml
@@ -0,0 +1,27 @@
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="wrap_content"
+    android:minHeight="100px">
+
+    <CheckBox
+        android:id="@+id/alarm_rejected"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceSmall"
+        android:focusable="false"/>
+
+    <CheckBox
+        android:id="@+id/alarm_blocked"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:focusable="false"/>
+
+    <TextView
+        android:id="@+id/alarm_name"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:gravity="left"
+        android:textAppearance="?android:attr/textAppearanceSmall" />
+
+</LinearLayout>
diff --git a/res/values/cm_strings.xml b/res/values/cm_strings.xml
index 94ed9e6..9011fab 100644
--- a/res/values/cm_strings.xml
+++ b/res/values/cm_strings.xml
@@ -442,4 +442,14 @@
     <!-- Launch music player when headset is connected -->
     <string name="headset_connect_player_title">Launch music player</string>
     <string name="headset_connect_player_summary">Launch the default music player when a headset is connected</string>
+
+    <!-- Alarm blocker -->
+    <string name="alarm_blocker">Alarm blocker</string>
+    <string name="alarm_blocker_title">Enable</string>
+    <string name="alarm_blocker_summary">Disable Alarms or Block Wakeup Alarms</string>
+    <string name="alarm_blocker_save">Save</string>
+    <string name="alarm_list_header">Available alarms</string>
+    <string name="alarm_blocker_reload">Reload</string>
+    <string name="alarm_blocker_warning_title">Proceed with caution</string>
+    <string name="alarm_blocker_warning">Blocking alarms have the potential to cause instability, crashes or data loss.</string>
 </resources>
diff --git a/res/xml/development_prefs.xml b/res/xml/development_prefs.xml
index 314da89..836cf36 100644
--- a/res/xml/development_prefs.xml
+++ b/res/xml/development_prefs.xml
@@ -44,6 +44,11 @@
                 android:targetClass="com.android.development.Development" />
     </PreferenceScreen>
 
+    <PreferenceScreen	
+        android:id="@+id/alarm_blocker"
+        android:title="@string/alarm_blocker"
+	android:fragment="com.android.settings.AlarmBlocker" />
+
     <com.android.settings.BugreportPreference
             android:key="bugreport"
             android:title="@*android:string/bugreport_title"
diff --git a/src/com/android/settings/AlarmBlocker.java b/src/com/android/settings/AlarmBlocker.java
new file mode 100644
index 0000000..bc9754b
--- /dev/null
+++ b/src/com/android/settings/AlarmBlocker.java
@@ -0,0 +1,344 @@
+/*
+ * Copyright (C) 2014 The LiquidSmooth Project
+ * Copyright (C) 2017 faust93 at monumentum@gmail.com
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings;
+
+import android.content.Context;
+import android.os.Bundle;
+import android.app.AlarmManager;
+import android.util.Log;
+import android.view.View;
+import android.view.ViewGroup;
+import android.preference.PreferenceFragment;
+import android.view.LayoutInflater;
+import android.widget.Switch;
+import android.widget.ListView;
+import android.widget.ArrayAdapter;
+import android.widget.TextView;
+import android.widget.CheckBox;
+import android.widget.CompoundButton;
+import android.widget.AdapterView;
+import android.provider.Settings;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+
+import java.util.List;
+import java.util.Iterator;
+import java.util.ArrayList;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.Collections;
+
+import com.android.settings.R;
+import com.android.settings.SettingsPreferenceFragment;
+
+public class AlarmBlocker extends SettingsPreferenceFragment {
+
+    private static final String TAG = "AlarmBlocker";
+
+    private Switch mBlockerEnabled;
+    private ListView mAlarmList;
+    private List<String> mSeenAlarms;
+    private List<String> mBlockedAlarms;
+    private LayoutInflater mInflater;
+    private Map<String, Boolean[]> mAlarmState;
+    private AlarmListAdapter mListAdapter;
+    private boolean mEnabled;
+    private AlertDialog mAlertDialog;
+    private boolean mAlertShown = false;
+    private TextView mAlarmListHeader;
+
+    private static final int MENU_RELOAD = Menu.FIRST;
+    private static final int MENU_SAVE = Menu.FIRST + 1;
+
+    public class AlarmListAdapter extends ArrayAdapter<String> {
+
+        public AlarmListAdapter(Context context, int resource, List<String> values) {
+            super(context, R.layout.alarm_item, resource, values);
+        }
+
+        @Override
+        public View getView(int position, View convertView, ViewGroup parent) {
+            View rowView = mInflater.inflate(R.layout.alarm_item, parent, false);
+
+            final TextView alarm_name = (TextView)rowView.findViewById(R.id.alarm_name);
+            final CheckBox check = (CheckBox)rowView.findViewById(R.id.alarm_blocked);
+            final CheckBox checkReject = (CheckBox)rowView.findViewById(R.id.alarm_rejected);
+
+            alarm_name.setText(mSeenAlarms.get(position));
+
+            check.setTag(mSeenAlarms.get(position));
+            checkReject.setTag(mSeenAlarms.get(position));
+
+            Boolean[] checkedBoxes = mAlarmState.get(alarm_name.getText().toString());
+            Boolean checked_r = checkedBoxes[0];
+            Boolean checked = checkedBoxes[1];
+
+            checkReject.setChecked(checked_r.booleanValue());
+            check.setChecked(checked.booleanValue());
+
+            if(checked_r.booleanValue()){
+                alarm_name.setTextColor(getResources().getColor(android.R.color.holo_red_light));
+            } else if(checked.booleanValue()){
+                alarm_name.setTextColor(getResources().getColor(android.R.color.holo_green_light));
+            }
+
+            check.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+                    @Override
+                    public void onCheckedChanged(CompoundButton v, boolean checked) {
+                        mAlarmState.put(v.getTag().toString(), new Boolean[] {false, checked});
+                        if(checked){
+                            checkReject.setChecked(false);
+                            alarm_name.setTextColor(getResources().getColor(android.R.color.holo_green_light));
+                        } else {
+                            alarm_name.setTextColor(getResources().getColor(android.R.color.black));
+                        }
+                    }
+            });
+
+            checkReject.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+                    @Override
+                    public void onCheckedChanged(CompoundButton v, boolean checked) {
+                        mAlarmState.put(v.getTag().toString(), new Boolean[] {checked, false});
+                        if(checked){
+                            check.setChecked(false);
+                            alarm_name.setTextColor(getResources().getColor(android.R.color.holo_red_light));
+                        } else {
+                            alarm_name.setTextColor(getResources().getColor(android.R.color.black));
+                        }
+                    }
+            });
+
+            return rowView;
+        }
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        Log.d("maxwen", "running");
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        mInflater = inflater;
+        setHasOptionsMenu(true);
+        return inflater.inflate(R.layout.alarm_blocker, container, false);
+    }
+
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+
+        mAlarmState = new HashMap<String, Boolean[]>();
+        updateSeenAlarmsList();
+        updateBlockedAlarmsList();
+
+        mBlockerEnabled = (Switch) getActivity().findViewById(
+                R.id.alarm_blocker_switch);
+        mAlarmList = (ListView) getActivity().findViewById(
+                R.id.alarm_list);
+        mAlarmListHeader = (TextView) getActivity().findViewById(
+                R.id.alarm_list_header);
+
+        mListAdapter = new AlarmListAdapter(getActivity(), android.R.layout.simple_list_item_multiple_choice,
+                mSeenAlarms);
+        mAlarmList.setAdapter(mListAdapter);
+
+        updateSwitches();
+
+        // after updateSwitches!!!
+        mBlockerEnabled
+                .setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+                    @Override
+                    public void onCheckedChanged(CompoundButton v, boolean checked) {
+                        if (checked && isFirstEnable() && !mAlertShown){
+                            showAlert();
+                            mAlertShown = true;
+                        }
+
+                        Settings.System.putInt(getActivity().getContentResolver(),
+                                Settings.Secure.ALARM_BLOCKING_ENABLED,
+                                checked?1:0);
+
+                        updateSwitches();
+                    }
+                });
+    }
+
+    @Override
+    protected int getMetricsCategory() {
+        return -1;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+    }
+
+    private boolean isFirstEnable() {
+        return Settings.System.getString(getActivity().getContentResolver(),
+                Settings.Secure.ALARM_BLOCKING_ENABLED) == null;
+    }
+
+    private void updateSwitches() {
+        mBlockerEnabled.setChecked(Settings.System.getInt(getActivity().getContentResolver(),
+                Settings.Secure.ALARM_BLOCKING_ENABLED, 0)==1?true:false);
+
+        mEnabled = mBlockerEnabled.isChecked();
+        mAlarmList.setVisibility(mEnabled ?View.VISIBLE : View.INVISIBLE);
+        mAlarmListHeader.setVisibility(mEnabled ?View.VISIBLE : View.INVISIBLE);
+    }
+
+    private void updateSeenAlarmsList() {
+        AlarmManager pm = (AlarmManager) getActivity().getSystemService(Context.ALARM_SERVICE);
+        Log.d("AlarmBlocker", pm.getSeenAlarms());
+
+        String seenAlarms =  pm.getSeenAlarms();
+        mSeenAlarms = new ArrayList<String>();
+
+        if (seenAlarms!=null && seenAlarms.length()!=0){
+            String[] parts = seenAlarms.split("\\|");
+            for(int i = 0; i < parts.length; i++){
+                mSeenAlarms.add(parts[i]);
+                mAlarmState.put(parts[i], new Boolean[] {false, false});
+            }
+        }
+    }
+
+    private void updateBlockedAlarmsList() {
+        String blockedAlarmList = Settings.System.getString(getActivity().getContentResolver(),
+                Settings.Secure.ALARM_BLOCKING_LIST);
+
+        mBlockedAlarms = new ArrayList<String>();
+        Boolean rejected, blocked;
+
+        if (blockedAlarmList!=null && blockedAlarmList.length()!=0){
+            String[] parts = blockedAlarmList.split("\\|");
+            for(int i = 0; i < parts.length; i++){
+                String[] state = parts[i].split("\\:");
+                if(state[1].equals("0")){
+                    rejected = false;
+                } else {
+                    rejected = true;
+                }
+                if(state[2].equals("0")){
+                    blocked = false;
+                } else {
+                    blocked = true;
+                }
+                mBlockedAlarms.add(state[0]);
+
+                // add all blocked but not seen so far
+                if(!mSeenAlarms.contains(state[0])){
+                    mSeenAlarms.add(state[0]);
+                }
+                mAlarmState.put(state[0], new Boolean[] {rejected, blocked});
+            }
+        }
+
+        Collections.sort(mSeenAlarms);
+    }
+
+    private void save(){
+        StringBuffer buffer = new StringBuffer();
+        Iterator<String> nextState = mAlarmState.keySet().iterator();
+        while(nextState.hasNext()){
+            String name = nextState.next();
+            Boolean[] state = mAlarmState.get(name);
+            if(state[0].booleanValue() || state[1].booleanValue()){
+                int rej = state[0] ? 1:0;
+                int blk = state[1] ? 1:0;
+                buffer.append(name + ":" + rej + ":" + blk + "|");
+            }
+        }
+        if(buffer.length()>0){
+            buffer.deleteCharAt(buffer.length() - 1);
+        }
+        Settings.System.putString(getActivity().getContentResolver(),
+                Settings.Secure.ALARM_BLOCKING_LIST, buffer.toString());
+    }
+
+    private void reload(){
+        mAlarmState = new HashMap<String, Boolean[]>();
+        updateSeenAlarmsList();
+        updateBlockedAlarmsList();
+
+        mListAdapter.notifyDataSetChanged();
+    }
+
+    @Override
+    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+        menu.add(0, MENU_RELOAD, 0, R.string.alarm_blocker_reload)
+                .setIcon(R.drawable.ic_menu_refresh_holo_dark)
+                .setAlphabeticShortcut('r')
+                .setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM |
+                        MenuItem.SHOW_AS_ACTION_WITH_TEXT);
+        menu.add(0, MENU_SAVE, 0, R.string.alarm_blocker_save)
+                .setIcon(android.R.drawable.ic_menu_save)
+                .setAlphabeticShortcut('s')
+                .setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM |
+                        MenuItem.SHOW_AS_ACTION_WITH_TEXT);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()) {
+            case MENU_RELOAD:
+                if (mEnabled){
+			reload();
+		}
+                return true;
+            case MENU_SAVE:
+                if (mEnabled){
+                    save();
+                }
+                return true;
+            default:
+                return false;
+        }
+    }
+
+    private void showAlert() {
+        /* Display the warning dialog */
+        mAlertDialog = new AlertDialog.Builder(getActivity()).create();
+        mAlertDialog.setTitle(R.string.alarm_blocker_warning_title);
+        mAlertDialog.setMessage(getResources().getString(R.string.alarm_blocker_warning));
+        mAlertDialog.setButton(DialogInterface.BUTTON_POSITIVE,
+                getResources().getString(com.android.internal.R.string.ok),
+                new DialogInterface.OnClickListener() {
+                    public void onClick(DialogInterface dialog, int which) {
+                        return;
+                    }
+                });
+        mAlertDialog.show();
+    }
+}
-- 
1.9.3 (Apple Git-50)

