From 75ef163ddce04f641f5bcf197ad03b221ea4d05c Mon Sep 17 00:00:00 2001
From: faust93 <monumentum@gmail.com>
Date: Sun, 29 Jan 2017 18:20:31 +0300
Subject: [PATCH] Wakelock Blocker [2/2]

Change-Id: I59c697646513522a99ef2e1f7d1efcca2de4978d
---
 AndroidManifest.xml                                |   2 +
 res/drawable-hdpi/ic_settings_wakelock_blocker.png | Bin 0 -> 4082 bytes
 res/drawable-mdpi/ic_settings_wakelock_blocker.png | Bin 0 -> 4082 bytes
 .../ic_settings_wakelock_blocker.png               | Bin 0 -> 4082 bytes
 res/layout/wakelock_blocker.xml                    |  79 ++++++
 res/layout/wakelock_item.xml                       |  13 +
 res/values/cm_strings.xml                          |  10 +
 res/xml/development_prefs.xml                      |   5 +
 src/com/android/settings/SettingsActivity.java     |   1 +
 src/com/android/settings/WakeLockBlocker.java      | 302 +++++++++++++++++++++
 wakelock_blocker.xml                               |  79 ++++++
 11 files changed, 491 insertions(+)
 create mode 100644 res/drawable-hdpi/ic_settings_wakelock_blocker.png
 create mode 100644 res/drawable-mdpi/ic_settings_wakelock_blocker.png
 create mode 100644 res/drawable-xhdpi/ic_settings_wakelock_blocker.png
 create mode 100644 res/layout/wakelock_blocker.xml
 create mode 100644 res/layout/wakelock_item.xml
 create mode 100644 src/com/android/settings/WakeLockBlocker.java
 create mode 100644 wakelock_blocker.xml

diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 9bc317e..45d6bfe 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -3340,5 +3340,7 @@
             </intent-filter>
         </activity>
 
+        <activity android:name=".WakeLockBlocker" />
+
     </application>
 </manifest>
diff --git a/res/drawable-hdpi/ic_settings_wakelock_blocker.png b/res/drawable-hdpi/ic_settings_wakelock_blocker.png
new file mode 100644
index 0000000000000000000000000000000000000000..f6e855e6255bdeb165ce51b101ee720ab0bffe46
GIT binary patch
literal 4082
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

literal 0
HcmV?d00001

diff --git a/res/drawable-mdpi/ic_settings_wakelock_blocker.png b/res/drawable-mdpi/ic_settings_wakelock_blocker.png
new file mode 100644
index 0000000000000000000000000000000000000000..f6e855e6255bdeb165ce51b101ee720ab0bffe46
GIT binary patch
literal 4082
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

literal 0
HcmV?d00001

diff --git a/res/drawable-xhdpi/ic_settings_wakelock_blocker.png b/res/drawable-xhdpi/ic_settings_wakelock_blocker.png
new file mode 100644
index 0000000000000000000000000000000000000000..f6e855e6255bdeb165ce51b101ee720ab0bffe46
GIT binary patch
literal 4082
zcmV<O4-N2%P)<h;3K|Lk000e1NJLTq002M$002M;1^@s6s%dfF00009a7bBm000XU
z000XU0RWnu7ytkYPiaF#P*7-ZbZ>KLZ*U+<Lqi~Na&Km7Y-Iodc-oy)XH-+^7Crag
z^g>IBfRsybQWXdwQbLP>6p<z>Aqfylh#{fb6;Z(vMMVS~$e@S=j*ftg6;Uh<iVD~V
z<RPMtgQJLw%KPDaqifc@_vX$1wbwr9tn;0-&j-K=43<bUQ8j=JsX`tR;Dg7+#^K~H
zK!FM*Z~zbpvt%K2{UZSY_<lS*D<Z%Lz5oGu(+dayz)hRLFdT>f59&ghTmgWD0l;*T
zI7<kC6aYYajzXpYKt=(8otP$50H6c_V9R4-;{Z@C0AMG7=F<Rxo%or10RUT+Ar%3j
zkpLhQWr#!oXgdI`&sK^>09Y^p6lP1rIRMx#05C~cW=H_Aw*bJ-5DT&Z2n+x)QHX^p
z00esgV8|mQcmRZ%02D^@S3L16t`O%c004NIvOKvYIYoh62rY33S640`D9%Y2D-<?i
z0%4j!F2Z@488U%158(66005wo6%pWr^Zj_v4zAA5HjcIqUoGmt2LB>rV&neh&#Q1i
z007~1e$oCcFS8neI|hJl{-P!B1ZZ9hpmq0)X0i`JwE&>$+E?>%_<lS*MWK+n+1cgf
z<k(8YLR(?VSAG6x!e78w{cQPuJpA|d;J)G{fihizM+Erb!p!tcr5w+a34~(Y=8s4G
zw+sLL9n&JjNn*KJDiq^U5^;`1nvC-@r6P$!k}1U{(*I=Q-z@tBKHoI}uxdU5dyy@u
zU1J0GOD7Ombim^G008p4Z^6_k2m^p<gW=D2|L;HjN1!DDfM!XOaR2~bL?kX$%CkSm
z2mk;?pn)o|K^yeJ7%adB9Ki+L!3+FgHiSYX#KJ-lLJDMn9CBbOtb#%)hRv`YDqt_v
zKpix|QD}yfa1JiQRk#j4a1Z)n2%f<xynzV>LC6RbVIkUx0b+_+BaR3cnT7Zv!AJxW
zizFb)h!jyGOOZ85F;a?DAXP{m@;!0_Ifq<Ex{*7`05XF7hP+2Hl!3BQJ=6@fL%FCo
z8iYoo3(#bAF`ADSpqtQgv>H8(HlgRxt7s3}k3K`kFu>>-2Q$QMFfPW!La{h336o>X
zu_CMttHv6zR;&ZNiS=X8v3CR#fknUxHUxJ<AYmRsNLWl*PS{AOARHt#5!wki2?K;t
z!Y3k=s7tgax)J%r7-BLphge7~Bi0g+6E6^Zh(p9TBoc{3GAFr^0!gu?RMHaCM$&Fl
zBk3%un>0uoBa_M6WNWeqIg~6QE69c9o#eyhGvpiOA@W-aonk<7r1(?fC{oI5N*U!4
z<uv66WtcKSRim0x-Ke2d5jBrmLam{;Qm;{ms1r1GnmNsb7D-E`t)i9F8fX`2_i3-_
zbh;7Ul^#x)&{xvS=|||7=mYe33=M`AgU5(xC>fg=2N-7=cNnjjOr{yriy6mMFgG#l
znCF=fnQv8CDz++o6_Lscl}eQ+l^ZHARH>?_s@|##Rr6KLRFA1%Q+=*RRWnoLsR`7U
zt5vF<Q0r40Q)j6=sE4X&sBct1q<&fbi3VB2Ov6t@q*0);U*o*SAPZv|vv@2aYYnT0
zb%8a+Cb7-ge0D0knEf5Qi#@8Tp*ce{N;6lpQuCB%KL_KOarm5cP6_8Ir<e17iry6O
zDdH&`rZh~sF=bq9s+O0QSgS~@QL9Jmy*94xr=6y~MY~!1fet~(N+(<=M`w@D1)b+p
z*;C!83a1uLJv#NSE~;y#8=<>IcfW3@?wFpwUVxrVZ>QdQz32KIeJ}k~{cZZE^+ya?
z2D1z#2HOnI7(B%_ac?{wFUQ;QQA1tBKtrWrm0_3Rgps+?Jfqb{jYbcQX~taRB;#$y
zZN{S}1|}gUOHJxc?wV3fxuz+mJ4`!F$IZ;mqRrNsHJd##*D~ju=bP7?-?v~|cv>vB
zsJ6IeNwVZxrdjT`yl#bBIa#GxRa#xMMy;K#CDyyGyQdMSxlWT#tDe?p!?5wT$+oGt
z8L;Kp2HUQ-ZMJ=3XJQv;x5ci*?vuTfeY$;({XGW_huIFR9a<fJbF^|4I#xQ~n$Dc=
zKYhjYmgz5NSkDm8*fZm{6U!;YX`NG>(?@3)XSs8O^N5RyOM=TTmp(3=8^+zpz2r)C
z^>JO{deZfso3oq3?Wo(Y?l$ge?uXo;%ru`Vo>?<<(8I_>;8Eq#KMS9gFl*neeosSB
zfoHYnBQIkwkyowPu(zdms`p{<7e4kra-ZWq<2*OsGTvEV%s0Td$hXT+!*8Bnh2KMe
zBmZRodjHV?r+_5^X9J0WL4jKW`}lf%A-|44I@@LTvf1rHjG(ze6+w@Jt%Bvjts!X0
z?2xS?_ve_-k<Mujg;0Lz*3buG=3$G&ehepthlN*$KaOySSQ^nWmo<0M+(UEUMEXRQ
zMBbZcF;6+KElM>iKB_KiJlZ$9G`c^=E@oNG)mWWaNo-3TIW8)$Hg0Ub-~8?KhvJ>$
z3*&nim@mj(aCxE5!t{lw7O5^0EIO7zOo&c6l<+|iDySBWCGrz@C5{St!X3hAA}`T4
z(TLbXTq+(;@<=L8dXnssyft|w#WSTW<++3>sgS%(4NTpeI-VAqb|7ssJvzNHgOZVu
zaYCvgO_R1~>SyL=cFU|~g|hy|Zi}}s9+d~lYqOB71z9Z$wnC=pR9Yz4DhIM>Wmjgu
z&56o6maCpC&F##y%G;1PobR9i?GnNg;gYtchD%p19a!eQtZF&3JaKv33gZ<8D~47E
ztUS1iwkmDaPpj=$m#%)jCVEY4fnLGNg2A-`YwHVD3gv};>)hAvT~AmqS>Lr``i7kw
zJ{5_It`yrBmlc25DBO7E8;5VoznR>Ww5hAaxn$2~(q`%A-YuS64wkBy=9dm`4cXeX
z4c}I@?e+FW+b@^RDBHV(wnMq2zdX3SWv9u`%{xC-q*U}&`cyXV(%rRT*Z6MH?i+i&
z_B8C(+grT%{XWUQ+f@NoP1R=AW&26{v-dx)iK^-Nmiuj8txj!m?Z*Ss1N{dh4z}01
z)YTo*JycSU)+_5r4#yw9{+;i4Ee$peRgIj+;v;ZGdF1K$3E%e~4LaI(jC-u%2h$&R
z9cLXcYC@Xwnns&bn)_Q~Te?roKGD|d-g^8;+aC{{G(1^(O7m37Y1-+6)01cN&y1aw
zoqc{T`P^XJqPBbIW6s}d4{z_f5Om?vMgNQEJG?v2T=KYd^0M3I6IZxbny)%vZR&LD
zJpPl@Psh8QyPB@KTx+@RdcC!KX7}kEo;S|j^u2lU7XQ}Oo;f|;z4Ll+_r>@1-xl3|
zawq-H%e&ckC+@AhPrP6BK<z=<L*0kfKU@CX*zeqbYQT4(^U>T#_XdT7&;F71j}Joy
zkC~6lh7E@6o;W@^IpRNZ{ptLtL(gQ-CY~4mqW;US7Zxvm_|@yz&e53Bp_lTPlfP|z
zrTyx_>lv@x#=^!PzR7qqF<$gm`|ZJZ+;<)Cqu&ot<a{81DF0~rvGr5Xr~8u`lav1h
z1DNytV>2z=0000WV@Og>004R=004l4008;_004mL004C`008P>0026e000+nl3&F}
z000FYNkl<Zc-rinU1(fI6vu!0FiF!iF_I=JiS{9}N|Uq*ZAE=d711c7iCXXj6koIm
z1@%D_Dd>x|kAXfF1o0_Q1cNmXMJqvL5;1<DZ5qTXYx+fP>qnc$<oK}Xu9L~#-TSqB
zFJ=!M?(EE+um7BL=FFM9Wg@~_rgGLel>jIKPy!$?Ny2!z*Z^Ee*rNR&Wn+~d-dVP!
zVF@Txw)fDe^Bk(kGM=IUVA5;A`wGH2pc-h3c!d{L>ed7GI>t$$xe(&y7l2=Yc}>>=
ze*&oj*`_~~9Z*b3iES6C)#qC}xHCX^#FHNet^+ebgHE{IQp4B)xT4QNeYOB!0$mYK
z{w3A<?ZAUsY(;D;P^ZuLfTs<q_y+hPq;aeQwpi~>WZ9Nu1E5-;&j6c%-G-I!iC7ix
z2Y#}4fY?1j6a9OElLZ>r3&2<wk&jgcZ1I}~ZqxJ}aMT!}BjTp0yX6Vc3Je(Se&J&b
zMFqg7^+x(r;N^hrY_tH#<y*wM4d&`RjIQ3`qaR6<3YgRjyc+<BB~^h~s4_wcxCMAN
zqH#%5RiIb_#KfvVE;<i<r=XVkRDnj|jyNPBN)`B69i$-C37qn{;*wMqxE4}+O#0c9
zkbiQ#n-~eW6L>{I72{p893VSSfX!B0?*ON@tqR~KqwFbtzg&3{c-uIr`CL+we0)~^
zqvx%%W0DM-6_ExHb6Lgzm#FZqz_i8>VpD-@qyv_Itn>nK8QA7hHk+r<CE#Ym9q$CD
zfSuZA(LKRYV2=*~7L6dtHkYIDn1?pnfKOBc97&i0c6hZ3QJw`ZsI^}7$N)nc0m3?F
zk9izVN+)~DMIGvkApw6G=`LNle2$P~`TKwut+L&~u>fJZ9lG*cED-XmLx^2qorugu
zXvuqnSaE~vMdYN*?$DU4o?i)YPI}G2XFx|pR($2kr&4g@ME+XM&Ct_hO2SSTNf;+r
z(AK8}?9se$3$pU56tZt0QdQ;svar7&nV85Y30ddo7l3}vGwDYWxm!eT7m;oe>C&f}
z?$Ywtt-5`ger9Hn+S=f^riTvMAe`1du0#odV*?%$k?%$1L$w87_4EM?fT~PcXJ`1U
z<4c#!zCQ8-fZuKKtUf;=eIxV`aMefs>(=j0X%Au)=H|j%lEJ}j@yf`y!Cswkxo&}#
zK#j-f?=o<oYpX*;PU=zM#(>iwWq9};gM-l0Qn15N)U;VdkhV5QjIRnvK<*Pr+miIS
zk4L2f)dfGwY}nwWehbmcLVC3RhU*1@+JXacIpeG~h7PSSEJS`9yo>b3W!Nt>1b7&D
zV^v8<2h7hy`ZhQy;9mpK>NCO~(*5+yeXcfOd_0;jsP^tP`#K(#9}p!!X8}-|DciLx
zYCqs;A^d=_Wbe&SWKts|&>iq&lg36kas(P0%s9dJB&xt;E?eQiigyklMz(JCw&G1q
z$o~Dv#fxSiZ6b2U>sg>IhOfmBX!O{m$AOU*IbKeK?d?!kw<1U50H!DOIdD%>B*5VV
zE|Sn6vdtD3r)_G5ok@TZH2GkJAhe3euU1==B2tmBZkzyQlY{}EZM3`S{G^DKd#N8c
z0NFrzQbcMDUT6KT5s_+*HP~W5?PcZTG=g3Y<9SwpZ)AIx8?C&r^onlDbC^3p{~2-v
z!4LVKe2{yALei_i!GLwAgG@e1K%^KT{H<4B%N_zP6&huFGsxtVrUJ20=|4jy07?Lq
k04M=a0-yxI+NFO70Lc5h(IK9m%m4rY07*qoM6N<$f`H|r(EtDd

literal 0
HcmV?d00001

diff --git a/res/layout/wakelock_blocker.xml b/res/layout/wakelock_blocker.xml
new file mode 100644
index 0000000..f6a6ded
--- /dev/null
+++ b/res/layout/wakelock_blocker.xml
@@ -0,0 +1,79 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/*
+** Copyright 2013, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:minHeight="?android:attr/listPreferredItemHeight"
+    android:gravity="center_vertical"
+    android:paddingEnd="?android:attr/scrollbarSize"
+    android:background="?android:attr/selectableItemBackground"
+    android:orientation="vertical">
+
+    <LinearLayout
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <RelativeLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content">
+
+            <TextView android:id="@+id/wakelock_blocker_title"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:singleLine="true"
+                android:textAppearance="?android:attr/textAppearanceMedium"
+                android:ellipsize="marquee"
+                android:text="@string/wakelock_blocker_title"
+                android:padding="6dp"
+                android:fadingEdge="horizontal" />
+
+            <TextView android:id="@+id/wakelock_blocker_title_summary"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_below="@id/wakelock_blocker_title"
+                android:layout_alignStart="@id/wakelock_blocker_title"
+                android:textAppearance="?android:attr/textAppearanceSmall"
+                android:textColor="?android:attr/textColorSecondary"
+                android:text="@string/wakelock_blocker_summary"
+                android:padding="6dp"
+                android:maxLines="4" />
+
+            <Switch 
+                android:id="@+id/wakelock_blocker_switch"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentRight="true" />
+
+        </RelativeLayout>
+
+    </LinearLayout>
+
+    <TextView
+        android:id="@+id/wakelock_list_header"
+        android:text="@string/wakelock_list_header"
+        style="?android:attr/listSeparatorTextViewStyle" />
+
+    <ListView
+        android:id="@+id/wakelock_list"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"/>
+
+</LinearLayout>
diff --git a/res/layout/wakelock_item.xml b/res/layout/wakelock_item.xml
new file mode 100644
index 0000000..85e8022
--- /dev/null
+++ b/res/layout/wakelock_item.xml
@@ -0,0 +1,13 @@
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="wrap_content">
+
+    <CheckBox
+        android:id="@+id/wakelock_blocked"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textAppearance="?android:attr/textAppearanceSmall"
+        android:focusable="false"/>
+
+</LinearLayout>
diff --git a/res/values/cm_strings.xml b/res/values/cm_strings.xml
index 94ed9e6..030f600 100644
--- a/res/values/cm_strings.xml
+++ b/res/values/cm_strings.xml
@@ -417,6 +417,16 @@
     <string name="heads_up_notifications_enabled_title">Heads-up</string>
     <string name="heads_up_notifications_enabled_summary">Display priority notifications in a small floating window</string>
 
+    <!-- Wakelock blocker -->
+    <string name="wakelock_blocker">Wakelock blocker</string>
+    <string name="wakelock_blocker_title">Enable</string>
+    <string name="wakelock_blocker_summary">Block system wakelocks</string>
+    <string name="wakelock_blocker_save">Save</string>
+    <string name="wakelock_list_header">Available wakelocks</string>
+    <string name="wakelock_blocker_reload">Reload</string>
+    <string name="wakelock_blocker_warning_title">Proceed with caution</string>
+    <string name="wakelock_blocker_warning">Blocking wakelocks have the potential to cause instability, crashes or data loss.</string>
+
     <!-- Encryption password -->
     <string name="crypt_keeper_change_password_title">Change encryption password</string>
     <string name="crypt_keeper_change_password_summary">Change the password used for device encryption</string>
diff --git a/res/xml/development_prefs.xml b/res/xml/development_prefs.xml
index 314da89..4ec2a9d 100644
--- a/res/xml/development_prefs.xml
+++ b/res/xml/development_prefs.xml
@@ -44,6 +44,11 @@
                 android:targetClass="com.android.development.Development" />
     </PreferenceScreen>
 
+    <PreferenceScreen	
+        android:id="@+id/wakelock_blocker"
+        android:title="@string/wakelock_blocker"
+	android:fragment="com.android.settings.WakeLockBlocker" />
+
     <com.android.settings.BugreportPreference
             android:key="bugreport"
             android:title="@*android:string/bugreport_title"
diff --git a/src/com/android/settings/SettingsActivity.java b/src/com/android/settings/SettingsActivity.java
index c513be0..e9f8ff0 100644
--- a/src/com/android/settings/SettingsActivity.java
+++ b/src/com/android/settings/SettingsActivity.java
@@ -379,6 +379,7 @@ public class SettingsActivity extends SettingsDrawerActivity
             NavbarSettings.class.getName(),
             FlingSettings.class.getName(),
             SmartbarSettings.class.getName(),
+            WakeLockBlocker.class.getName(),
             PulseSettings.class.getName()
     };
 
diff --git a/src/com/android/settings/WakeLockBlocker.java b/src/com/android/settings/WakeLockBlocker.java
new file mode 100644
index 0000000..f03739c
--- /dev/null
+++ b/src/com/android/settings/WakeLockBlocker.java
@@ -0,0 +1,302 @@
+/*
+ * Copyright (C) 2014 The LiquidSmooth Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings;
+
+import android.content.Context;
+import android.os.Bundle;
+import android.os.PowerManager;
+import android.util.Log;
+import android.view.View;
+import android.view.ViewGroup;
+import android.preference.PreferenceFragment;
+import android.view.LayoutInflater;
+import android.widget.Switch;
+import android.widget.ListView;
+import android.widget.ArrayAdapter;
+import android.widget.TextView;
+import android.widget.CheckBox;
+import android.widget.CompoundButton;
+import android.widget.AdapterView;
+import android.provider.Settings;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+
+import java.util.List;
+import java.util.Iterator;
+import java.util.ArrayList;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.Collections;
+
+import com.android.settings.R;
+import com.android.settings.SettingsPreferenceFragment;
+
+public class WakeLockBlocker extends SettingsPreferenceFragment {
+
+    private static final String TAG = "WakeLockBlocker";
+
+    private Switch mBlockerEnabled;
+    private ListView mWakeLockList;
+    private List<String> mSeenWakeLocks;
+    private List<String> mBlockedWakeLocks;
+    private LayoutInflater mInflater;
+    private Map<String, Boolean> mWakeLockState;
+    private WakeLockListAdapter mListAdapter;
+    private boolean mEnabled;
+    private AlertDialog mAlertDialog;
+    private boolean mAlertShown = false;
+    private TextView mWakeLockListHeader;
+
+    private static final int MENU_RELOAD = Menu.FIRST;
+    private static final int MENU_SAVE = Menu.FIRST + 1;
+
+    public class WakeLockListAdapter extends ArrayAdapter<String> {
+
+        public WakeLockListAdapter(Context context, int resource, List<String> values) {
+            super(context, R.layout.wakelock_item, resource, values);
+        }
+
+        @Override
+        public View getView(int position, View convertView, ViewGroup parent) {
+            View rowView = mInflater.inflate(R.layout.wakelock_item, parent, false);
+            final CheckBox check = (CheckBox)rowView.findViewById(R.id.wakelock_blocked);
+            check.setText(mSeenWakeLocks.get(position));
+
+            Boolean checked = mWakeLockState.get(check.getText().toString());
+            check.setChecked(checked.booleanValue());
+
+            if(checked.booleanValue()){
+                check.setTextColor(getResources().getColor(android.R.color.holo_red_light));
+            }
+
+            check.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+                    @Override
+                    public void onCheckedChanged(CompoundButton v, boolean checked) {
+                        mWakeLockState.put(v.getText().toString(), new Boolean(checked));
+                        if(checked){
+                            check.setTextColor(getResources().getColor(android.R.color.holo_red_light));
+                        } else {
+                            check.setTextColor(getResources().getColor(android.R.color.primary_text_dark));
+                        }
+                    }
+            });
+            return rowView;
+        }
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        Log.d("maxwen", "running");
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        mInflater = inflater;
+        setHasOptionsMenu(true);
+        return inflater.inflate(R.layout.wakelock_blocker, container, false);
+    }
+
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+
+        mWakeLockState = new HashMap<String, Boolean>();
+        updateSeenWakeLocksList();
+        updateBlockedWakeLocksList();
+
+        mBlockerEnabled = (Switch) getActivity().findViewById(
+                R.id.wakelock_blocker_switch);
+        mWakeLockList = (ListView) getActivity().findViewById(
+                R.id.wakelock_list);
+        mWakeLockListHeader = (TextView) getActivity().findViewById(
+                R.id.wakelock_list_header);
+
+        mListAdapter = new WakeLockListAdapter(getActivity(), android.R.layout.simple_list_item_multiple_choice,
+                mSeenWakeLocks);
+        mWakeLockList.setAdapter(mListAdapter);
+
+        updateSwitches();
+
+        // after updateSwitches!!!
+        mBlockerEnabled
+                .setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+                    @Override
+                    public void onCheckedChanged(CompoundButton v, boolean checked) {
+                        if (checked && isFirstEnable() && !mAlertShown){
+                            showAlert();
+                            mAlertShown = true;
+                        }
+
+                        Settings.System.putInt(getActivity().getContentResolver(),
+                                Settings.Secure.WAKELOCK_BLOCKING_ENABLED,
+                                checked?1:0);
+
+                        updateSwitches();
+                    }
+                });
+    }
+
+    @Override
+    protected int getMetricsCategory() {
+        return -1;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+    }
+
+    private boolean isFirstEnable() {
+        return Settings.System.getString(getActivity().getContentResolver(),
+                Settings.Secure.WAKELOCK_BLOCKING_ENABLED) == null;
+    }
+
+    private void updateSwitches() {
+        mBlockerEnabled.setChecked(Settings.System.getInt(getActivity().getContentResolver(),
+                Settings.Secure.WAKELOCK_BLOCKING_ENABLED, 0)==1?true:false);
+
+        mEnabled = mBlockerEnabled.isChecked();
+        //mWakeLockList.setEnabled(mEnabled);
+        mWakeLockList.setVisibility(mEnabled ?View.VISIBLE : View.INVISIBLE);
+        mWakeLockListHeader.setVisibility(mEnabled ?View.VISIBLE : View.INVISIBLE);
+    }
+
+    private void updateSeenWakeLocksList() {
+        PowerManager pm = (PowerManager) getActivity().getSystemService(Context.POWER_SERVICE);
+        Log.d("maxwen", pm.getSeenWakeLocks());
+
+        String seenWakeLocks =  pm.getSeenWakeLocks();
+        mSeenWakeLocks = new ArrayList<String>();
+
+        if (seenWakeLocks!=null && seenWakeLocks.length()!=0){
+            String[] parts = seenWakeLocks.split("\\|");
+            for(int i = 0; i < parts.length; i++){
+                mSeenWakeLocks.add(parts[i]);
+                mWakeLockState.put(parts[i], new Boolean(false));
+            }
+        }
+    }
+
+    private void updateBlockedWakeLocksList() {
+        String blockedWakelockList = Settings.System.getString(getActivity().getContentResolver(),
+                Settings.Secure.WAKELOCK_BLOCKING_LIST);
+
+        mBlockedWakeLocks = new ArrayList<String>();
+
+        if (blockedWakelockList!=null && blockedWakelockList.length()!=0){
+            String[] parts = blockedWakelockList.split("\\|");
+            for(int i = 0; i < parts.length; i++){
+                mBlockedWakeLocks.add(parts[i]);
+
+                // add all blocked but not seen so far
+                if(!mSeenWakeLocks.contains(parts[i])){
+                    mSeenWakeLocks.add(parts[i]);
+                }
+                mWakeLockState.put(parts[i], new Boolean(true));
+            }
+        }
+
+        Collections.sort(mSeenWakeLocks);
+    }
+
+    private void save(){
+        StringBuffer buffer = new StringBuffer();
+        Iterator<String> nextState = mWakeLockState.keySet().iterator();
+        while(nextState.hasNext()){
+            String name = nextState.next();
+            Boolean state=mWakeLockState.get(name);
+            if(state.booleanValue()){
+                buffer.append(name + "|");
+            }
+        }
+        if(buffer.length()>0){
+            buffer.deleteCharAt(buffer.length() - 1);
+        }
+        Settings.System.putString(getActivity().getContentResolver(),
+                Settings.Secure.WAKELOCK_BLOCKING_LIST, buffer.toString());
+    }
+
+    private void reload(){
+        mWakeLockState = new HashMap<String, Boolean>();
+        updateSeenWakeLocksList();
+        updateBlockedWakeLocksList();
+
+		mListAdapter.notifyDataSetChanged();
+    }
+
+    @Override
+    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+        menu.add(0, MENU_RELOAD, 0, R.string.wakelock_blocker_reload)
+                .setIcon(R.drawable.ic_menu_refresh_holo_dark)
+                .setAlphabeticShortcut('r')
+                .setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM |
+                        MenuItem.SHOW_AS_ACTION_WITH_TEXT);
+        menu.add(0, MENU_SAVE, 0, R.string.wakelock_blocker_save)
+                .setIcon(android.R.drawable.ic_menu_save)
+                .setAlphabeticShortcut('s')
+                .setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM |
+                        MenuItem.SHOW_AS_ACTION_WITH_TEXT);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()) {
+            case MENU_RELOAD:
+                if (mEnabled){
+			reload();
+		}
+                return true;
+            case MENU_SAVE:
+                if (mEnabled){
+                    save();
+                }
+                return true;
+            default:
+                return false;
+        }
+    }
+
+    private void showAlert() {
+        /* Display the warning dialog */
+        mAlertDialog = new AlertDialog.Builder(getActivity()).create();
+        mAlertDialog.setTitle(R.string.wakelock_blocker_warning_title);
+        mAlertDialog.setMessage(getResources().getString(R.string.wakelock_blocker_warning));
+        mAlertDialog.setButton(DialogInterface.BUTTON_POSITIVE,
+                getResources().getString(com.android.internal.R.string.ok),
+                new DialogInterface.OnClickListener() {
+                    public void onClick(DialogInterface dialog, int which) {
+                        return;
+                    }
+                });
+        mAlertDialog.show();
+    }
+}
diff --git a/wakelock_blocker.xml b/wakelock_blocker.xml
new file mode 100644
index 0000000..f6a6ded
--- /dev/null
+++ b/wakelock_blocker.xml
@@ -0,0 +1,79 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/*
+** Copyright 2013, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:minHeight="?android:attr/listPreferredItemHeight"
+    android:gravity="center_vertical"
+    android:paddingEnd="?android:attr/scrollbarSize"
+    android:background="?android:attr/selectableItemBackground"
+    android:orientation="vertical">
+
+    <LinearLayout
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <RelativeLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content">
+
+            <TextView android:id="@+id/wakelock_blocker_title"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:singleLine="true"
+                android:textAppearance="?android:attr/textAppearanceMedium"
+                android:ellipsize="marquee"
+                android:text="@string/wakelock_blocker_title"
+                android:padding="6dp"
+                android:fadingEdge="horizontal" />
+
+            <TextView android:id="@+id/wakelock_blocker_title_summary"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_below="@id/wakelock_blocker_title"
+                android:layout_alignStart="@id/wakelock_blocker_title"
+                android:textAppearance="?android:attr/textAppearanceSmall"
+                android:textColor="?android:attr/textColorSecondary"
+                android:text="@string/wakelock_blocker_summary"
+                android:padding="6dp"
+                android:maxLines="4" />
+
+            <Switch 
+                android:id="@+id/wakelock_blocker_switch"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentRight="true" />
+
+        </RelativeLayout>
+
+    </LinearLayout>
+
+    <TextView
+        android:id="@+id/wakelock_list_header"
+        android:text="@string/wakelock_list_header"
+        style="?android:attr/listSeparatorTextViewStyle" />
+
+    <ListView
+        android:id="@+id/wakelock_list"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"/>
+
+</LinearLayout>
-- 
1.9.3 (Apple Git-50)

